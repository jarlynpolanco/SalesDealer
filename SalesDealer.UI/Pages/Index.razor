@page "/"
@inject ISalesRepository _salesRepository
@inject IFileRepository _fileRepository

<h1>Dealers de Claro Dominicana</h1>

<br />
<br />

@if (salesList == null)
{
    <p><em>LOADING...</em></p>
}
else
{
<div class="form-group form-inline">
    <label for="Date"><strong>Fecha de venta:</strong></label>
    <input type="date" class="form-control" id="Date" placeholder="Seleccione fecha de venta"
            @onchange="@(args => FilterByDateSelected(args.Value.ToString()))">
</div>
    <br />
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>Código</th>
                <th>Cédula</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Monto</th>
                <th>Descripción</th>
                <th>Fecha</th>
                <th>Hora</th>
                <th>Revendedor</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in salesList)
            {
                <tr>
                    <td>@item.SaleCod</td>
                    <td>@item.ClientDocumentNumber</td>
                    <td>@item.ClientName</td>
                    <td>@item.ClientLastName</td>
                    <td>@FormatNumberAsAmount(item.SaleAmount)</td>
                    <td>@item.SaleDescription</td>
                    <td>@item.SaleDate</td>
                    <td>@FormatTimeAsShort(item.SaleTime)</td>
                    <td>@item.ResellerCName</td>
                </tr>
            }
        </tbody>
    </table>
}

@code{
    private IList<SalesFH> salesList;
    private IList<SalesFH> originalSalesList;

    protected override async Task OnInitializedAsync()
    {
        string fileName = await _fileRepository.Get(Endpoints.GenerateSalesEndpoint);
        salesList = await _salesRepository.Get(Endpoints.GetSalesEndpoint, fileName);
        originalSalesList = salesList;
    }

    private void FilterByDateSelected(string value)
    {
        salesList = originalSalesList
            .Where(x => (DateTime.ParseExact(x.SaleDate, "dd/MM/yyyy", CultureInfo.InvariantCulture).Date)
                == (DateTime.ParseExact(value, "yyyy-MM-dd", CultureInfo.InvariantCulture).Date)).ToList();
    }

    private string FormatNumberAsAmount(string amount)
    {
        var money = decimal.Parse(amount);
        return $"{money:C}"; ;
    }

    private string FormatTimeAsShort(string time)
    {
        return $"{time.Split(':')[0]}:{time.Split(':')[1]}";
    }
}
